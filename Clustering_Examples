{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basics of Cluster Analysis 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the relevant libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.cluster import KMeans\n",
    "sns.set()\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Language</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USA</td>\n",
       "      <td>44.97</td>\n",
       "      <td>-103.77</td>\n",
       "      <td>English</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Canada</td>\n",
       "      <td>62.40</td>\n",
       "      <td>-96.80</td>\n",
       "      <td>English</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>France</td>\n",
       "      <td>46.75</td>\n",
       "      <td>2.40</td>\n",
       "      <td>French</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>UK</td>\n",
       "      <td>54.01</td>\n",
       "      <td>-2.53</td>\n",
       "      <td>English</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Germany</td>\n",
       "      <td>51.15</td>\n",
       "      <td>10.40</td>\n",
       "      <td>German</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Australia</td>\n",
       "      <td>-25.45</td>\n",
       "      <td>133.11</td>\n",
       "      <td>English</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Country  Latitude  Longitude Language\n",
       "0        USA     44.97    -103.77  English\n",
       "1     Canada     62.40     -96.80  English\n",
       "2     France     46.75       2.40   French\n",
       "3         UK     54.01      -2.53  English\n",
       "4    Germany     51.15      10.40   German\n",
       "5  Australia    -25.45     133.11  English"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"k_means_country.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(*args, **kw)>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Longitude'], df['Latitude'])\n",
    "plt.xlim(-180, 180)\n",
    "plt.ylim(-90, 90)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select the features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>44.97</td>\n",
       "      <td>-103.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>62.40</td>\n",
       "      <td>-96.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>46.75</td>\n",
       "      <td>2.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54.01</td>\n",
       "      <td>-2.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51.15</td>\n",
       "      <td>10.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-25.45</td>\n",
       "      <td>133.11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Latitude  Longitude\n",
       "0     44.97    -103.77\n",
       "1     62.40     -96.80\n",
       "2     46.75       2.40\n",
       "3     54.01      -2.53\n",
       "4     51.15      10.40\n",
       "5    -25.45     133.11"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = df.iloc[:,1:3]\n",
    "x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n",
       "    n_clusters=2, n_init=10, n_jobs=1, precompute_distances='auto',\n",
       "    random_state=None, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans = KMeans(2)\n",
    "kmeans.fit(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cluster results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 0, 0, 0, 0, 1])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "identified_clusters = kmeans.fit_predict(x)\n",
    "identified_clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Language</th>\n",
       "      <th>Cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USA</td>\n",
       "      <td>44.97</td>\n",
       "      <td>-103.77</td>\n",
       "      <td>English</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Canada</td>\n",
       "      <td>62.40</td>\n",
       "      <td>-96.80</td>\n",
       "      <td>English</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>France</td>\n",
       "      <td>46.75</td>\n",
       "      <td>2.40</td>\n",
       "      <td>French</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>UK</td>\n",
       "      <td>54.01</td>\n",
       "      <td>-2.53</td>\n",
       "      <td>English</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Germany</td>\n",
       "      <td>51.15</td>\n",
       "      <td>10.40</td>\n",
       "      <td>German</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Australia</td>\n",
       "      <td>-25.45</td>\n",
       "      <td>133.11</td>\n",
       "      <td>English</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Country  Latitude  Longitude Language  Cluster\n",
       "0        USA     44.97    -103.77  English        0\n",
       "1     Canada     62.40     -96.80  English        0\n",
       "2     France     46.75       2.40   French        0\n",
       "3         UK     54.01      -2.53  English        0\n",
       "4    Germany     51.15      10.40   German        0\n",
       "5  Australia    -25.45     133.11  English        1"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_with_clusters = df.copy()\n",
    "data_with_clusters['Cluster'] = identified_clusters\n",
    "data_with_clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(*args, **kw)>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Longitude'], df['Latitude'], c=data_with_clusters['Cluster'], cmap='rainbow')\n",
    "plt.xlim(-180, 180)\n",
    "plt.ylim(-90, 90)\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Map the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>Language</th>\n",
       "      <th>Clusters</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>USA</td>\n",
       "      <td>44.97</td>\n",
       "      <td>-103.77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Canada</td>\n",
       "      <td>62.40</td>\n",
       "      <td>-96.80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>France</td>\n",
       "      <td>46.75</td>\n",
       "      <td>2.40</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>UK</td>\n",
       "      <td>54.01</td>\n",
       "      <td>-2.53</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Germany</td>\n",
       "      <td>51.15</td>\n",
       "      <td>10.40</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Australia</td>\n",
       "      <td>-25.45</td>\n",
       "      <td>133.11</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Country  Latitude  Longitude  Language  Clusters\n",
       "0        USA     44.97    -103.77         0         0\n",
       "1     Canada     62.40     -96.80         0         0\n",
       "2     France     46.75       2.40         1         0\n",
       "3         UK     54.01      -2.53         0         0\n",
       "4    Germany     51.15      10.40         2         0\n",
       "5  Australia    -25.45     133.11         0         1"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_mapped = df.copy()\n",
    "data_mapped['Language'] = data_mapped['Language'].map({'English':0, 'French':1, 'German':2})\n",
    "data_mapped['Clusters'] = identified_clusters\n",
    "data_mapped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13205.758119999999"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans.inertia_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# -------------------------------------------------------------------------"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Basics of Cluster Analysis 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the relevant libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.cluster import KMeans\n",
    "sns.set()\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Satisfaction</th>\n",
       "      <th>Loyalty</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>-1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>-0.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>-0.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>-1.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10</td>\n",
       "      <td>-0.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>-0.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>1.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8</td>\n",
       "      <td>0.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>-0.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>0.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "      <td>-1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>7</td>\n",
       "      <td>0.27</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>9</td>\n",
       "      <td>1.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>8</td>\n",
       "      <td>1.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>7</td>\n",
       "      <td>1.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>9</td>\n",
       "      <td>0.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>10</td>\n",
       "      <td>1.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>3</td>\n",
       "      <td>-1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4</td>\n",
       "      <td>1.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>3</td>\n",
       "      <td>-0.96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>6</td>\n",
       "      <td>1.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>9</td>\n",
       "      <td>-0.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>10</td>\n",
       "      <td>0.37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>9</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>3</td>\n",
       "      <td>-1.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>5</td>\n",
       "      <td>0.73</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Satisfaction  Loyalty\n",
       "0              4    -1.33\n",
       "1              6    -0.28\n",
       "2              5    -0.99\n",
       "3              7    -0.29\n",
       "4              4     1.06\n",
       "5              1    -1.66\n",
       "6             10    -0.97\n",
       "7              8    -0.32\n",
       "8              8     1.02\n",
       "9              8     0.68\n",
       "10            10    -0.34\n",
       "11             5     0.39\n",
       "12             5    -1.69\n",
       "13             2     0.67\n",
       "14             7     0.27\n",
       "15             9     1.36\n",
       "16             8     1.38\n",
       "17             7     1.36\n",
       "18             7    -0.34\n",
       "19             9     0.67\n",
       "20            10     1.18\n",
       "21             3    -1.69\n",
       "22             4     1.04\n",
       "23             3    -0.96\n",
       "24             6     1.03\n",
       "25             9    -0.99\n",
       "26            10     0.37\n",
       "27             9     0.03\n",
       "28             3    -1.36\n",
       "29             5     0.73"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv(\"marketing_clustering.csv\")\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Loyalty')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Satisfaction'], df['Loyalty'])\n",
    "plt.xlabel('Satisfaction')\n",
    "plt.ylabel('Loyalty')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Selecting the features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "x1 = df.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n",
       "    n_clusters=2, n_init=10, n_jobs=1, precompute_distances='auto',\n",
       "    random_state=None, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "kmeans = KMeans(2)\n",
    "kmeans.fit(x1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cluster results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "clusters = x1.copy()\n",
    "clusters['cluster_pred'] = kmeans.fit_predict(x1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Loyalty')"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(clusters['Satisfaction'], clusters['Loyalty'], c=clusters['cluster_pred'], cmap='rainbow')\n",
    "plt.xlabel('Satisfaction')\n",
    "plt.ylabel('Loyalty')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Satisfaction</th>\n",
       "      <th>Loyalty</th>\n",
       "      <th>cluster_pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>-1.33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.06</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>-1.66</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10</td>\n",
       "      <td>-0.97</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>1.02</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>0.39</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "      <td>-1.69</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2</td>\n",
       "      <td>0.67</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>7</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>9</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>8</td>\n",
       "      <td>1.38</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>7</td>\n",
       "      <td>1.36</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>9</td>\n",
       "      <td>0.67</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>10</td>\n",
       "      <td>1.18</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>3</td>\n",
       "      <td>-1.69</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4</td>\n",
       "      <td>1.04</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>3</td>\n",
       "      <td>-0.96</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>6</td>\n",
       "      <td>1.03</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>9</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>10</td>\n",
       "      <td>0.37</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>9</td>\n",
       "      <td>0.03</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>3</td>\n",
       "      <td>-1.36</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>5</td>\n",
       "      <td>0.73</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Satisfaction  Loyalty  cluster_pred\n",
       "0              4    -1.33             1\n",
       "1              6    -0.28             1\n",
       "2              5    -0.99             1\n",
       "3              7    -0.29             0\n",
       "4              4     1.06             1\n",
       "5              1    -1.66             1\n",
       "6             10    -0.97             0\n",
       "7              8    -0.32             0\n",
       "8              8     1.02             0\n",
       "9              8     0.68             0\n",
       "10            10    -0.34             0\n",
       "11             5     0.39             1\n",
       "12             5    -1.69             1\n",
       "13             2     0.67             1\n",
       "14             7     0.27             0\n",
       "15             9     1.36             0\n",
       "16             8     1.38             0\n",
       "17             7     1.36             0\n",
       "18             7    -0.34             0\n",
       "19             9     0.67             0\n",
       "20            10     1.18             0\n",
       "21             3    -1.69             1\n",
       "22             4     1.04             1\n",
       "23             3    -0.96             1\n",
       "24             6     1.03             0\n",
       "25             9    -0.99             0\n",
       "26            10     0.37             0\n",
       "27             9     0.03             0\n",
       "28             3    -1.36             1\n",
       "29             5     0.73             1"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Standard the features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.93138063, -1.3318111 ],\n",
       "       [-0.15523011, -0.28117124],\n",
       "       [-0.54330537, -0.99160391],\n",
       "       [ 0.23284516, -0.29117733],\n",
       "       [-0.93138063,  1.05964534],\n",
       "       [-2.09560642, -1.6620122 ],\n",
       "       [ 1.39707095, -0.97159172],\n",
       "       [ 0.62092042, -0.32119561],\n",
       "       [ 0.62092042,  1.01962097],\n",
       "       [ 0.62092042,  0.67941378],\n",
       "       [ 1.39707095, -0.3412078 ],\n",
       "       [-0.54330537,  0.38923705],\n",
       "       [-0.54330537, -1.69203048],\n",
       "       [-1.70753116,  0.66940768],\n",
       "       [ 0.23284516,  0.26916393],\n",
       "       [ 1.00899568,  1.35982816],\n",
       "       [ 0.62092042,  1.37984035],\n",
       "       [ 0.23284516,  1.35982816],\n",
       "       [ 0.23284516, -0.3412078 ],\n",
       "       [ 1.00899568,  0.66940768],\n",
       "       [ 1.39707095,  1.17971847],\n",
       "       [-1.31945589, -1.69203048],\n",
       "       [-0.93138063,  1.03963316],\n",
       "       [-1.31945589, -0.96158562],\n",
       "       [-0.15523011,  1.02962706],\n",
       "       [ 1.00899568, -0.99160391],\n",
       "       [ 1.39707095,  0.36922486],\n",
       "       [ 1.00899568,  0.02901767],\n",
       "       [-1.31945589, -1.36182938],\n",
       "       [-0.54330537,  0.72944425]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "\n",
    "x_scaled = preprocessing.scale(x1)\n",
    "x_scaled"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Select the clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[59.99999999999999,\n",
       " 29.818973034723147,\n",
       " 17.913349527387965,\n",
       " 10.247181805928424,\n",
       " 7.792695153937187,\n",
       " 6.586212092192188,\n",
       " 5.363006425346784,\n",
       " 4.33711075023706,\n",
       " 3.747474252962613]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wcss = []\n",
    "\n",
    "for i in range(1,10):\n",
    "    kmeans = KMeans(i)\n",
    "    kmeans.fit(x_scaled)\n",
    "    wcss.append(kmeans.inertia_)\n",
    "    \n",
    "wcss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The Elbow Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "no_clusters = range(1,10)\n",
    "\n",
    "plt.plot(no_clusters, wcss)\n",
    "plt.title('The Elbow Method')\n",
    "plt.xlabel('No of clusters')\n",
    "plt.ylabel('wcss value')\n",
    "plt.show()\n",
    "#2 cluster is sub optimal\n",
    "#3 cluster isa better solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explore clustering solutions and select the number of clusters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans_new = KMeans(4)\n",
    "kmeans_new.fit(x_scaled)\n",
    "clusters_new = x1.copy()\n",
    "clusters_new['cluster_pred'] = kmeans_new.fit_predict(x_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Satisfaction</th>\n",
       "      <th>Loyalty</th>\n",
       "      <th>cluster_pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>-1.33</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>-0.28</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.29</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.06</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>-1.66</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>10</td>\n",
       "      <td>-0.97</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>-0.32</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>1.02</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>8</td>\n",
       "      <td>0.68</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>0.39</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "      <td>-1.69</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2</td>\n",
       "      <td>0.67</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>7</td>\n",
       "      <td>0.27</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>9</td>\n",
       "      <td>1.36</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>8</td>\n",
       "      <td>1.38</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>7</td>\n",
       "      <td>1.36</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>7</td>\n",
       "      <td>-0.34</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>9</td>\n",
       "      <td>0.67</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>10</td>\n",
       "      <td>1.18</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>3</td>\n",
       "      <td>-1.69</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>4</td>\n",
       "      <td>1.04</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>3</td>\n",
       "      <td>-0.96</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>6</td>\n",
       "      <td>1.03</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>9</td>\n",
       "      <td>-0.99</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>10</td>\n",
       "      <td>0.37</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>9</td>\n",
       "      <td>0.03</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>3</td>\n",
       "      <td>-1.36</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>5</td>\n",
       "      <td>0.73</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Satisfaction  Loyalty  cluster_pred\n",
       "0              4    -1.33             0\n",
       "1              6    -0.28             2\n",
       "2              5    -0.99             0\n",
       "3              7    -0.29             2\n",
       "4              4     1.06             1\n",
       "5              1    -1.66             0\n",
       "6             10    -0.97             2\n",
       "7              8    -0.32             2\n",
       "8              8     1.02             3\n",
       "9              8     0.68             3\n",
       "10            10    -0.34             2\n",
       "11             5     0.39             1\n",
       "12             5    -1.69             0\n",
       "13             2     0.67             1\n",
       "14             7     0.27             2\n",
       "15             9     1.36             3\n",
       "16             8     1.38             3\n",
       "17             7     1.36             3\n",
       "18             7    -0.34             2\n",
       "19             9     0.67             3\n",
       "20            10     1.18             3\n",
       "21             3    -1.69             0\n",
       "22             4     1.04             1\n",
       "23             3    -0.96             0\n",
       "24             6     1.03             1\n",
       "25             9    -0.99             2\n",
       "26            10     0.37             3\n",
       "27             9     0.03             2\n",
       "28             3    -1.36             0\n",
       "29             5     0.73             1"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'Loyalty')"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(clusters_new['Satisfaction'], clusters_new['Loyalty'], c=clusters_new['cluster_pred'], cmap='rainbow')\n",
    "plt.xlabel('Satisfaction')\n",
    "plt.ylabel('Loyalty')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

